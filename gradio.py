# -*- coding: utf-8 -*-
"""Gradio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ir_ElKYVlrOW8N_kUvAwfIuB9BKVtjN0
"""

!pip install gradio
!pip install sentencepiece
!pip install -U transformers

!wget install https://raw.githubusercontent.com/monologg/KoBERT-Transformers/master/kobert_transformers/tokenization_kobert.py

from transformers.models.encoder_decoder.modeling_encoder_decoder import EncoderDecoderModel
from transformers import(PreTrainedTokenizer,
                         BartTokenizer as BaseBartTokenizer)
from tokenization_kobert import KoBertTokenizer
from typing import Dict, List
from google.colab import drive
import gradio as gr
import torch.cuda
import torch
import gc

class BartTokenizer(BaseBartTokenizer):
  def build_inputs_with_special_tokens(self, token_ids: List[int], _) -> List[int]:
    return token_ids + [self.eos_token_id]

drive.mount('/content/gdrive/')

src_tokenizer = KoBertTokenizer.from_pretrained('monologg/kobert')
trg_tokenizer = BartTokenizer.from_pretrained("facebook/bart-base")

path = '/content/gdrive/MyDrive/dump/best_model'
model = EncoderDecoderModel.from_pretrained(path)

model.config.decoder_start_token_id = trg_tokenizer.bos_token_id
model.cuda()

gc.collect()
torch.cuda.empty_cache()

import gradio as gr
def greet(name):
  return 'test'

def  generate(text):
  embed = src_tokenizer(text, return_attention_mask=False, return_token_type_ids=False, return_tensors='pt')
  embed = {k: v.cuda() for k, v in embed.items()}
  genertated = model.generate(**embed,
                            num_beams=5,
                            do_sample=True,
                            no_repeat_ngram_size=3,
                            top_k=50,
                            top_p=0.97,
                            max_length=100)[0,1:-1]
  output = trg_tokenizer.decode(genertated)
  return output



with gr.Blocks() as demo:
  name = gr.Textbox(label='Sentence')
  output = gr.Textbox(label='Output')
  
  butotn = gr.Button('Generate')
  butotn.click(fn=generate, inputs=name, outputs=output)

demo.launch()

